services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - airflow_network

  webserver:
    build:
      context: .
    container_name: airflow_webserver
    depends_on:
      postgres:
        condition: service_healthy
      scheduler:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      JAVA_HOME: /usr/lib/jvm/java-11-openjdk-arm64
      SPARK_HOME: /opt/spark
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./data/invoices_logs.json:/opt/airflow/invoices_logs.json
      - ./data/test.json:/opt/airflow/test.json
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - airflow_network
    command: webserver

  scheduler:
    build:
      context: .
    container_name: airflow_scheduler
    depends_on:
      clickhouse:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      JAVA_HOME: /usr/lib/jvm/java-11-openjdk-arm64
      SPARK_HOME: /opt/spark                      
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./data/invoices_logs.json:/opt/airflow/invoices_logs.json
      - ./data/test.json:/opt/airflow/test.json
    healthcheck:
      test: ["CMD-SHELL", "airflow jobs check --job-type SchedulerJob"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - airflow_network
    command: scheduler

  airflow-init:
    build:
      context: .
    container_name: airflow_init
    depends_on:
      postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      JAVA_HOME: /usr/lib/jvm/java-11-openjdk-arm64 
      SPARK_HOME: /opt/spark                   
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./data/test.json:/opt/airflow/test.json
      - ./data/invoices_logs.json:/opt/airflow/invoices_logs.json
    networks:
      - airflow_network
    entrypoint: ["airflow", "db", "init"]

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: clickhouse
    environment:
      - CLICKHOUSE_DB=default
      - CLICKHOUSE_USER=default
      - CLICKHOUSE_PASSWORD=default
    volumes:
      - ./clickhouse-init:/docker-entrypoint-initdb.d
    ports:
      - "8123:8123"
      - "9000:9000"
    networks:
      - airflow_network
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "clickhouse-client --query 'SELECT 1' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  fastapi:
    build:
      context: .
      dockerfile: Dockerfile.fastapi
    container_name: fastapi_service
    ports:
      - "8000:8000"
    depends_on:
      clickhouse:
        condition: service_healthy
    networks:
      - airflow_network
    environment:
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: default
      CLICKHOUSE_DATABASE: default

volumes:
  postgres_data:
  clickhouse_data:

networks:
  airflow_network:
    driver: bridge